// STEP 1: Add ProductType model and optional field WITHOUT changing the existing enum
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  SERVICE_PROVIDER
}

model Role {
  id          String   @id @default(cuid())
  displayName String
  roleName    String   @unique
  description String?
  permissions String[]
  users       User[]   @relation("UserRoles")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([roleName])
}

model User {
  id                    String         @id @default(cuid())
  name                  String
  firstName             String
  lastName              String
  phone                 String         @unique
  email                 String         @unique
  emailVerified         DateTime?
  image                 String?
  jobTitle              String?
  roles                 Role[]         @relation("UserRoles")
  password              String?
  status                Boolean        @default(true)
  accounts              Account[]
  sessions              Session[]
  savings               Saving[]
  isAdmin               Boolean        @default(false)
  isVerfied             Boolean        @default(false)
  token                 String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  Address               Address[]
  CartItem              CartItem[]
  WishlistItem          WishlistItem[]
  Order                 Order[]
  Review                Review[]
  Message               Message[]
  AdminConversations    Conversation[] @relation("AdminConversations")
  CustomerConversations Conversation[] @relation("CustomerConversations")
}

model Category {
  id          String  @id @default(cuid())
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?
  
  parentId      String?
  parent        Category?  @relation("CategorySubcategories", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories Category[] @relation("CategorySubcategories")
  
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Product   Product[]

  @@index([parentId])
}

model Saving {
  id          String    @id @default(cuid())
  amount      Int
  month       String
  name        String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentDate DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  type        String
  firstName   String
  lastName    String
  company     String?
  streetLine1 String
  streetLine2 String?
  city        String
  state       String
  postalCode  String
  country     String  @default("South Africa")
  phone       String?
  isDefault   Boolean @default(false)

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  logo        String?
  description String?
  website     String?
  products    Product[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([slug])
}

// NEW: Dynamic ProductType model
model ProductTypeRef {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([slug])
  @@index([isActive])
}

// KEEP the original enum exactly as it was
enum ProductType {
  WINDOW
  DOOR
  PROFILE
  ACCESSORY
  GLASS
  HARDWARE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

model Product {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?       @db.Text
  shortDesc   String?
  sku         String        @unique
  
  // KEEP original field exactly as it was
  type ProductType?
  
  // ADD new optional field
  productTypeId String?
  productType   ProductTypeRef? @relation(fields: [productTypeId], references: [id], onDelete: SetNull)
  
  status      ProductStatus @default(ACTIVE)

  price        Float
  comparePrice Float?
  costPrice    Float?
  stockQuantity Int     @default(0)
  lowStockAlert Int     @default(10)
  trackStock    Boolean @default(true)
  weight Float
  length Float
  width  Float
  height Float
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  brandId    String?
  brand      Brand?   @relation(fields: [brandId], references: [id])
  thumbnail     String?
  imageUrls     String[]
  variants      ProductVariant[]
  attributes    ProductAttribute[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]
  metaTitle  String?
  metaDesc   String?
  isFeatured Boolean @default(false)
  isOnSale   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([sku])
  @@index([categoryId])
  @@index([status])
  @@index([productTypeId])
}

model ProductVariant {
  id            String  @id @default(cuid())
  productId     String
  name          String
  sku           String  @unique
  price         Float
  stockQuantity Int     @default(0)
  image         String?

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([sku])
}

model Attribute {
  id         String  @id @default(cuid())
  name       String  @unique
  type       String
  isRequired Boolean @default(false)
  sortOrder  Int     @default(0)

  values            AttributeValue[]
  productAttributes ProductAttribute[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttributeValue {
  id          String @id @default(cuid())
  attributeId String
  value       String
  sortOrder   Int    @default(0)

  attribute         Attribute          @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  productAttributes ProductAttribute[]

  createdAt DateTime @default(now())

  @@index([attributeId])
}

model ProductAttribute {
  id          String  @id @default(cuid())
  productId   String
  attributeId String
  valueId     String
  customValue String?

  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute Attribute      @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  value     AttributeValue @relation(fields: [valueId], references: [id], onDelete: Cascade)

  @@unique([productId, attributeId])
  @@index([productId])
}

model CartItem {
  id        String  @id @default(cuid())
  userId    String
  productId String
  variantId String?
  quantity  Int

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId, variantId])
  @@index([userId])
}

model WishlistItem {
  id        String @id @default(cuid())
  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CASH_ON_COLLECTION
  CARD_ONLINE
  EFT
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum DeliveryMethod {
  DELIVERY
  COLLECTION
}

model Order {
  id          String @id @default(cuid())
  orderNumber String @unique
  userId      String

  status         OrderStatus    @default(PENDING)
  paymentMethod  PaymentMethod
  paymentStatus  PaymentStatus  @default(PENDING)
  deliveryMethod DeliveryMethod
  isNewOrder     Boolean        @default(true)

  subtotal    Float
  taxAmount   Float
  deliveryFee Float
  discount    Float
  total       Float

  shippingAddressId String?
  billingAddressId  String?

  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  trackingNumber    String?
  deliveryNotes     String?

  notes         String?
  internalNotes String?

  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  variantId  String?
  quantity   Int
  unitPrice  Float
  totalPrice Float

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  createdAt DateTime @default(now())

  @@index([orderId])
}

model Payment {
  id      String        @id @default(cuid())
  orderId String
  amount  Float
  method  PaymentMethod
  status  PaymentStatus @default(PENDING)

  transactionId   String?
  gatewayResponse String? @db.Text

  reference String?
  notes     String?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([status])
}

model Review {
  id         String  @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String? @db.Text
  isVerified Boolean @default(false)
  isApproved Boolean @default(false)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  type      String   @default("string")
  group     String   @default("general")
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([group])
}

model Conversation {
  id         String    @id @default(cuid())
  customerId String
  adminId    String
  messages   Message[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  customer User @relation("CustomerConversations", fields: [customerId], references: [id])
  admin    User @relation("AdminConversations", fields: [adminId], references: [id])

  @@index([customerId])
  @@index([adminId])
}

model Message {
  id             String   @id @default(cuid())
  content        String
  conversationId String
  senderId       String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation(fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  thumbnail   String?
  imageUrls   String[]
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}
